package com.tienpx.generation

import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiDocumentManager
import com.intellij.psi.PsiManager
import com.tienpx.extension.isImageExtension
import com.tienpx.setting.PluginSetting
import com.tienpx.utils.FileHelper
import com.tienpx.utils.Utils
import com.tienpx.utils.Utils.toLowCamelCase
import com.tienpx.utils.Utils.toUpperCaseFirst

class AssetsFileGenerator(private val project: Project) {
    fun generate() {
        WriteCommandAction.runWriteCommandAction(project) {
            val map = mutableMapOf<String, String>()
            val file = FileHelper.getAssetsFolder(project)
            if (file == null) {
                Utils.showNotify("Please configure your assets path in pubspec.yaml")
                return@runWriteCommandAction
            }
            generateFileMap(file, map)
            if (map.isEmpty()) {
                Utils.showNotify("Assets folder is empty")
                return@runWriteCommandAction
            }
            val content = StringBuilder()
            content.append("//This file is automatically generated. DO NOT EDIT, all your changes would be lost.\n")
            var className = PluginSetting.getInstance().className
            content.append("class $className {\n  $className._();\n\n")
            map.toSortedMap().forEach {
                content.append("  static const String ${it.key} = '${it.value}';\n")
            }
            content.append("\n}\n")
            val psiManager = PsiManager.getInstance(project)
            val psiDocumentManager = PsiDocumentManager.getInstance(project)
            FileHelper.getGeneratedFile(project).let { file ->
                psiManager.findFile(file)?.let { dartFile ->
                    psiDocumentManager.getDocument(dartFile)?.let { document ->
                        if (document.text != content.toString()) {
                            document.setText(content)
                            psiDocumentManager.commitDocument(document)
                            Utils.showNotify("Assets generate succeed")
                            Utils.openFile(file)
                        } else {
                            Utils.showNotify("Nothing changed")
                        }
                    }
                }
            }
        }
    }

    private fun generateFileMap(root: VirtualFile, map: MutableMap<String, String>) {
        root.children.filter {
            !it.name.startsWith('.') && it.name.isImageExtension
        }.forEach {
            if (it.isDirectory) {
                generateFileMap(it, map)
            } else {
                var key = it.nameWithoutExtension.toLowCamelCase()///fileName style
                val value = it.path.removePrefix("${project.basePath}/")
                if (PluginSetting.getInstance().namedWithParent) {
                    it.parent?.let { parent ->
                        key = "${parent.name}${key.toUpperCaseFirst()}"
                        if (map.containsKey(key)) {
                            key = "${parent.parent.name}${key.toUpperCaseFirst()}"
                        }
                        map[key] = value
                    }
                } else {
                    map[key] = value
                }
            }
        }
    }
}