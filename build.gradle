plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.6.5'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'

group 'com.tienpx'
version '1.0.0-1'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
//intellij {
//    version '2020.1.1'
//}

//runIde {
//    ideDirectory '/Applications/Android Studio.app/Contents'
//}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
}

patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

def ideaVersionPrefix = 201
def ideaVersion = intellij {
    def requiredPlugins = ['yaml']
    if (ideaVersionPrefix != '' && ideaVersionPrefix.toInteger() >= 192) {
        requiredPlugins.add('java')
    }
    plugins = requiredPlugins
}

def productMatrixFile = 'product-matrix.json'
def jsonFile = new File(productMatrixFile)
if (jsonFile == null) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile, is it missing?")
}

// Fail if the product details file isn't found.
// noinspection UnnecessaryQualifiedReference
def productMatrix = new groovy.json.JsonSlurper().parseText(jsonFile.text)
if (productMatrix == null || !(productMatrix instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile.")
}

// If an ideaVersionPrefix is provided, search for the first matched product and use that.
if (ideaVersionPrefix != '') {
    def productMatrixKeys = productMatrix.keySet() as String[]
    for (productMatrixKey in productMatrixKeys) {
        if (productMatrixKey != null && productMatrixKey.startsWith("${ideaVersionPrefix}.")) {
            ideaVersion = productMatrixKey
            break
        }
    }
}

// Fail if requested version is unsupported.
if (!productMatrix.containsKey(ideaVersion)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Requested IDEA version is unsupported: $ideaVersion")
}

// Determine which branch we're building for.
def productDetails = productMatrix[ideaVersion]
if (productDetails == null || !(productDetails instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Product details for IDEA version $ideaVersion is missing or invalid.")
}

// Adjust plugin's output file name.
rootProject.setBuildDir("${rootProject.buildDir}/${productDetails.comments}")


System.out.println(
        "\nBuilding plugin for IDEA " +
                "version $ideaVersion (branch ${productDetails.comments})\n"
)
System.out.println("Since: ${productDetails.sinceBuild}")
System.out.println("Until: ${productDetails.untilBuild}")
System.out.println("Dart: ${productDetails.dartPluginVersion}")
System.out.println("Flutter: ${productDetails.flutterPluginVersion}\n")
System.out.println("Artifacts output directory: ${rootProject.buildDir}\n")

// Adjust plugin build com.tienpx.settings.
intellij.version = ideaVersion
intellij.plugins += "Dart:${productDetails.dartPluginVersion}"
intellij.plugins += "io.flutter:${productDetails.flutterPluginVersion}"
intellij.plugins += "Kotlin"
patchPluginXml.sinceBuild = productDetails.sinceBuild
patchPluginXml.untilBuild = productDetails.untilBuild